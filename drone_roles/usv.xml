<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="ArmTakeoff">
        <Sequence>
            <Action ID="Arm" service_name="set_arming_state"/>
            <Action ID="Offboard" service_name="set_offboard_mode"/>
            <Action ID="TakeOff" height="0" speed="0.5"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Delay delay_msec="60000">
            <Sequence>
                <SubTree ID="ArmTakeoff" __shared_blackboard="false" tk_height="2" tk_speed="0.5"/>
                <Action ID="GoTo" max_speed="6" name="Undock" pose="-1440;-16.5;0" yaw_angle="0.0" yaw_mode="0"/>
                <ForceSuccess>
                    <KeepRunningUntilFailure>
                        <IfThenElse>
                            <Action ID="RadarSearch" drone_id="{topic}" vessel_pose="{pose}"/>
                            <Sequence>
                                <Action ID="Echo" data="{pose}" name="EchoRadarDetection"/>
                                <Action ID="SendEvent" data="-1000;-500;20" name="SendInspection" topic_name="/drone_4/event"/>
                                <Timeout msec="300000">
                                    <Decorator ID="WaitForEvent" name="WaitForDetection" result="{vessel_pose}" topic_name="/usv/event">
                                        <IfThenElse>
                                            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{vessel_pose}" value_B="0;0;0">
                                                <AlwaysFailure name="DetectionFalse"/>
                                            </BlackboardCheckString>
                                            <Sequence>
                                                <Action ID="GoTo" max_speed="6" name="GoToVessel" pose="{vessel_pose}" yaw_angle="0.0" yaw_mode="0"/>
                                                <Decorator ID="WaitForEvent" result="" topic_name="mission/rtl">
                                                    <AlwaysSuccess/>
                                                </Decorator>
                                            </Sequence>
                                            <AlwaysSuccess name="TryNextRadarSearch"/>
                                        </IfThenElse>
                                    </Decorator>
                                </Timeout>
                            </Sequence>
                            <AlwaysFailure name="NoRadarSearch"/>
                        </IfThenElse>
                    </KeepRunningUntilFailure>
                </ForceSuccess>
                <Action ID="GoTo" max_speed="6" name="MidPoint" pose="-1000;0;0" yaw_angle="0.0" yaw_mode="0"/>
                <ForceSuccess>
                    <KeepRunningUntilFailure>
                        <IfThenElse>
                            <Action ID="RadarSearch" drone_id="{topic}" vessel_pose="{pose2}"/>
                            <Sequence>
                                <Action ID="SendEvent" data="{pose2}" name="SendInspection" topic_name="/drone_5/event"/>
                                <Timeout msec="300000">
                                    <Decorator ID="WaitForEvent" name="WaitForDetection" result="{vessel_pose2}" topic_name="/usv/event">
                                        <IfThenElse>
                                            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{vessel_pose2}" value_B="0;0;0">
                                                <AlwaysFailure name="DetectionFalse"/>
                                            </BlackboardCheckString>
                                            <Sequence>
                                                <Action ID="GoTo" max_speed="6" pose="{vessel_pose2}" yaw_angle="0.0" yaw_mode="0"/>
                                                <Decorator ID="WaitForEvent" result="" topic_name="mission/rtl">
                                                    <AlwaysSuccess/>
                                                </Decorator>
                                            </Sequence>
                                            <AlwaysSuccess name="TryNextRadar"/>
                                        </IfThenElse>
                                    </Decorator>
                                </Timeout>
                            </Sequence>
                            <AlwaysFailure name="NoRadarSearch"/>
                        </IfThenElse>
                    </KeepRunningUntilFailure>
                </ForceSuccess>
                <IfThenElse>
                    <Action ID="RadarSearch" drone_id="{topic}" vessel_pose="{pose3}"/>
                    <Sequence>
                        <Action ID="SendEvent" data="{pose3}" topic_name="/drone_6/event"/>
                        <Timeout msec="300000">
                            <Decorator ID="WaitForEvent" name="WaitForDetection" result="{vessel_pose3}" topic_name="/usv/event">
                                <IfThenElse>
                                    <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{vessel_pose3}" value_B="0;0;0">
                                        <AlwaysFailure name="DetectionFalse"/>
                                    </BlackboardCheckString>
                                    <Sequence>
                                        <Action ID="GoTo" max_speed="6" pose="{vessel_pose3}" yaw_angle="0.0" yaw_mode="0"/>
                                        <Decorator ID="WaitForEvent" result="" topic_name="mission/rtl">
                                            <AlwaysSuccess/>
                                        </Decorator>
                                    </Sequence>
                                    <AlwaysSuccess/>
                                </IfThenElse>
                            </Decorator>
                        </Timeout>
                    </Sequence>
                    <AlwaysFailure name="NoRadarSearch"/>
                </IfThenElse>
            </Sequence>
        </Delay>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="AreaPlanner">
            <input_port name="output_path_topic_name">Topic where the path will be published</input_port>
            <input_port name="polygon_center">Topic where the polygon will be read</input_port>
        </Action>
        <Action ID="Arm">
            <input_port default="set_arming_state" name="service_name">Arming service name</input_port>
        </Action>
        <SubTree ID="ArmTakeoff">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="2" name="tk_height">Takeoff Height</input_port>
            <input_port default="0.5" name="tk_speed">Takeoff Speed</input_port>
        </SubTree>
        <Action ID="Disarm">
            <input_port default="set_arming_state" name="service_name">Arming service name</input_port>
        </Action>
        <Action ID="Earth2Rectified">
            <input_port name="earth_pose"/>
            <output_port name="rectified_pose"/>
        </Action>
        <Action ID="Echo">
            <input_port name="data"/>
        </Action>
        <Action ID="FollowObject"/>
        <Action ID="FollowPath">
            <input_port name="path_topic_name">Topic where the path will be published</input_port>
            <input_port name="pose_topic_name"/>
            <input_port default="traj_gen/send_traj_wayp" name="service_name">Service name to create new trajectory</input_port>
            <input_port name="speed">Maximum speed</input_port>
            <input_port default="0" name="yaw_mode">Yaw mode</input_port>
        </Action>
        <Action ID="GoTo">
            <input_port name="max_speed">Maximum cruise speed</input_port>
            <input_port name="pose">Position</input_port>
            <input_port default="0.0" name="yaw_angle">Angle of yaw</input_port>
            <input_port default="0" name="yaw_mode">Yaw mode flag: {KEEP_YAW = 0; PATH_FACING = 1; FIXED_YAW = 2}</input_port>
        </Action>
        <Action ID="Hover"/>
        <SubTree ID="IdentifyVessel"/>
        <Condition ID="IsFlying"/>
        <Condition ID="IsTargetDetected">
            <input_port name="dist_threshold">Minimum distance to target</input_port>
            <output_port name="pose">Target Pose</output_port>
            <input_port name="topic_name">Topic Name</input_port>
        </Condition>
        <Action ID="Land">
            <input_port default="0.5" name="speed">Landing speed</input_port>
        </Action>
        <Action ID="Offboard">
            <input_port default="set_offboard_mode" name="service_name">Offboard service name</input_port>
        </Action>
        <Action ID="Pick"/>
        <SubTree ID="PickObject"/>
        <SubTree ID="RTL">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="{pose}" name="pose">Launch pose</input_port>
        </SubTree>
        <Action ID="RadarSearch">
            <output_port name="drone_id"/>
            <output_port name="vessel_pose"/>
        </Action>
        <Action ID="Search">
            <output_port name="drone_topic"/>
            <output_port name="pose"/>
        </Action>
        <SubTree ID="SearchInArea"/>
        <Action ID="SendEvent">
            <input_port name="data">Data to send</input_port>
            <input_port name="topic_name">Topic Name</input_port>
        </Action>
        <Action ID="TakeOff">
            <input_port default="2" name="height">Takeoff Height</input_port>
            <input_port default="0.5" name="speed">Takeoff Speed</input_port>
        </Action>
        <Action ID="UnPick"/>
        <SubTree ID="UnPickObject"/>
        <Decorator ID="WaitForEvent">
            <output_port name="result">Result</output_port>
            <input_port name="topic_name">Event Topic Name</input_port>
        </Decorator>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

